%%%-------------------------------------------------------------------
%%% @author Madalin Grigore-Enescu <madalingrigoreenescu@gmail.com>
%%% @doc Contains helper functions for generating Time UUIDs unique across a huge
%%% distributed cloud without using any global counter facility.
%%%
%%% The time UUID was designed by me as a funny exercise, it is 64 bytes long and it's made up of 4 components:
%%%
%%% - 2 bytes - UUID version, always 00 for current implementation version, allow us to change the UUID implementation in the future
%%    gives us to design 99 more versions of the UUID and still keeping compatibility with older UUID including the proper order
%%%   any new hash generated with a new algorithm being bigger than a previous version. This could be very valuable for time series.
%%% - 13 bytes - current Unix Timestamp in milliseconds limited at maximum value of 9999999999999 = 11/20/2286 date
%%% - 10 bytes - local cloud node int32 monotonic increasing counter limited at a maximum value of 4294967295
%%%   (allows us to generate a maximum of 4.294.967.295 unique UUIDs per millisecond per node)
%%% - 39 bytes - current node name hash (128 bit hash) for ensuring the uniqueness across the cloud
%%%   (limited at a maximum 340282366920938463463374607431768211456 combinations)
%%%
%%% It is quite safe to assume we will never reach those limitations in the near future.
%%%
%%% @end
%%%-------------------------------------------------------------------

-module(asim_lib_utils_timeuuid).

-include("../include/asim.hrl").

-export([origin/0]).
-export([infinity/0]).
-export([new/1]).
-export([now/0]).

%% Current time uuid version
-define(TIME_UUID_VERSION_0, <<"00">>).
-define(TIME_UUID_VERSION_LAST, ?TIME_UUID_VERSION_0).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% ORIGIN
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Returns an origin time uuid
%% Origin time uuid is the 0 reference point in the past for all other time uuid that can be used in comparisons with others time uuid
origin() -> <<"0">>.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% INFINITY
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @doc Returns an infinity time uuid
%% An infinity time uuid is a time uuid far away in the future.
%% This time uuid is so far away in the future that no other time uuid generated by calling now() will be bigger than this sequence.
%% Infinity time uuid can be used in time comparisons between 2 different time uuids.
infinity() -> <<"9999999999999999999999999999999999999999999999999999999999999999">>.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% new (create a new timeuuid)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @spec new() -> {integer(), binary()}
%% @doc Creates a new Time UUID guarantee to be unique at cloud level.
new({_Seconds, Milliseconds, _Microseconds, _}) -> new(Milliseconds);
new(Milliseconds) when erlang:is_integer(Milliseconds) ->

    case Milliseconds > 9999999999999 of
        false ->

	        %% Hash the node name
	        <<NodeHash:16/big-unsigned-integer-unit:8, _Tail/binary>> = crypto:hash(md5, erlang:atom_to_binary(erlang:node(), utf8)),

            BinMilliseconds     = erlang:integer_to_binary(Milliseconds),
            BinCounter          = erlang:integer_to_binary(asim_lib_db_ets:get_node_counter_uint32()),
	        BinNodeHash         = erlang:integer_to_binary(NodeHash),

	        FixedSizeBinMilliseconds = asim_lib_utils_binaries:prepend_byte_to_size(BinMilliseconds, 13, 48),
	        FixedSizeBinCounter      = asim_lib_utils_binaries:prepend_byte_to_size(BinCounter, 10, 48),
	        FixedSizeBinNodeHash     = asim_lib_utils_binaries:prepend_byte_to_size(BinNodeHash, 39, 48),

            <<?TIME_UUID_VERSION_LAST/binary,
	            FixedSizeBinMilliseconds/binary,
	            FixedSizeBinCounter/binary,
	            FixedSizeBinNodeHash/binary>>;

        _ -> throw(timeuuid_invalid_time)

    end;

new({{Year, Month, Day}, {Hour, Minute, Second}}) -> new(asim_lib_utils_time:convert_datetime_to_fulltime({{Year, Month, Day}, {Hour, Minute, Second}}));
new({Year, Month, Day}) -> new(asim_lib_utils_time:convert_datetime_to_fulltime({{Year, Month, Day}, {0, 0, 0}})).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% now (create a new timeuuid)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% @spec global_new() -> {{Seconds, Milliseconds, Microseconds, {{Year, Month, Day}, {Hour, Minute, Second}}}, binary()}
%% @doc Creates a new Time UUID guarantee to be unique at global level.
now() ->

    FullTime = asim_lib_utils_time:full(),
    {FullTime, new(FullTime)}.
